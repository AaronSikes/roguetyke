#!/usr/bin/env ruby -w

require "curses"
include Curses

require_relative 'lib/map'
require_relative 'lib/map_frame'

def init_controls
  message = "i - open/close inventory; q - quit; arrows/hjkl - scroll map; HJKL - scroll quickly"
  status_line = Window.new 1, cols, lines-1, 0
  status_line.addstr message
  status_line.refresh
end

def map_data
  map_path = File.expand_path '../map.ascii', __FILE__
  IO.readlines map_path
end

class FramePad
  def initialize(frame, pad)
    @frame = frame
    @pad = pad
  end

  def handle_char(ch)
    case ch
    when KEY_LEFT, 'h'
      @frame.scroll_left
    when KEY_RIGHT, 'l'
      @frame.scroll_right
    when KEY_UP, 'k'
      @frame.scroll_up
    when KEY_DOWN, 'j'
      @frame.scroll_down
    when 'H'
      @frame.scroll_left 10
    when 'L'
      @frame.scroll_right 10
    when 'K'
      @frame.scroll_up 10
    when 'J'
      @frame.scroll_down 10
    end

    refresh
  end

  def refresh
    @pad.refresh(*@frame.dimensions)
  end
end

def show_map
  win = stdscr
  win.refresh
  init_controls
  map = Map.new map_data
  frame = Box.new width: 3*cols/4, height: 3*lines/4
  border_frame = Window.new 3*lines/4+3, 3*cols/4+3, lines/8-1, cols/8-1
  border_frame.box '|', '-'
  border_frame.refresh
  map_frame = MapFrame.new top: win.maxy/8, left: win.maxx/8, map: map, frame: frame
  pad = map.create_pad
  pad.refresh(*map_frame.dimensions)

  FramePad.new map_frame, pad
end

def open_inventory
  win = Window.new lines/2, cols/2, lines/4, cols/4
  frame = Window.new lines/2+2, cols/2+2, lines/4-1,cols/4-1
  items = [
    'You search through your pockets and find:',
    'A belt',
    'A towel',
    'A strange book',
    '4 small health potions',
    '1 large health potion',
    'An item with a very long name that will probably wrap to the next line because it has such a very long name',
    'Your dignity',
    '64 copies of Adam Sandler\'s "Click" on Blu-ray'
  ]
  message = items.join("\n - ")

  frame.box(?|, ?-)
  frame.refresh
  win.addstr message
  win.refresh
end

def run_loop
  frame = show_map
  inventory_open = false
  loop do
    ch = stdscr.getch
    case ch
    when 'q', 'Q'
      break
    when 'i', 'I'
      if inventory_open
        inventory_open = false
        frame.refresh
      else
        inventory_open = true
        open_inventory
      end
    else
      frame.handle_char(ch) unless inventory_open
    end
  end
end

init_screen
begin
  noecho
  cbreak
  curs_set 0
  stdscr.keypad true

  run_loop
ensure
  echo
  nocbreak
  stdscr.keypad false
  close_screen
end

